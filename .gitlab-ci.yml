variables:
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ""
  DOCKER_DRIVER: overlay2
  DOCK_REG_GRP: "api"
  DOCK_IMG: "basket-api"

stages:
  - pre-version
  - build
  - test
  - codequality
  - package
  - validate
  - deploy
  - release
  - rollback

pre-semantic-version:
  image: clmdevops/semantic-release
  stage: fetch-version
  only:
    refs:
    - branches
  except:
    refs:
    - tags
  script:
    - npx semantic-release --generate-notes false --dry-run
  artifacts:
    paths:
    - VERSION.txt
  tags:
    - kubernetes

# build:
#   stage: build
#   script:
#     - echo "Version is $(cat VERSION.txt)"

build:
  image: mcr.microsoft.com/dotnet/core/sdk:3.1
  stage: build
  before_script:
    - cd microservices/Basket
    - dotnet restore
  script:
    - dotnet build
  only:
    refs:
    - branches
  except:
    refs:
    - tags
  tags:
    - kubernetes

unit_test:
  image: mcr.microsoft.com/dotnet/core/sdk:3.1
  stage: test
  before_script:
    - cd microservices/Basket
  script:
    - dotnet test Basket.UnitTests
  only:
    refs:
    - branches
  except:
    refs:
    - tags
  tags:
    - kubernetes

functional_test:
  image: mcr.microsoft.com/dotnet/core/sdk:3.1
  services:
    - rabbitmq:3
    - redis:latest
  stage: test
  before_script:
    - cd microservices/Basket
  script:
    - dotnet test Basket.FunctionalTests
  only:
    refs:
    - branches
  except:
    refs:
    - tags
  tags:
    - kubernetes

# JOB para revision de calidad del codigo
sonar_test:
  image: sonarsource/sonar-scanner-cli
  stage: test
  # allow_failure: true
  variables:
    SONAR_SOURCE: "microservices/Basket"
    SONAR_EXCLUSIONS: "**/bin/**,**/obj/**"
  before_script:
    # Validar que existe el archivo sonar-project.properties requerido.
    - |
      if [ -f sonar-project.properties ]
        then
          echo "Existe archivo sonar-project.properties."
          cat sonar-project.properties
        else
          echo "No existe archivo sonar-project.properties." ; exit 1
      fi
     # Validar la existencia de la variable sonar_source.
    - if [ -z "$SONAR_SOURCE" ]; then export SONAR_SOURCE="."; fi
    # Tipos administidos: NodeJS, Gradle, Maven
    - echo "Obteniendo la version de la app"
    - SONAR_PROJECT_VERSION=$(cat VERSION.txt)
  script:
    - sonar-scanner --debug
  tags:
    - kubernetes

detect_secrets:
  image: clmdevops/detect-secrets:0.14.3
  stage: test
  variables:
    SCAN_SOURCE: "microservices/Basket"
  script:
    - detect-secrets scan $SCAN_SOURCE >> .detect-secrets-log.json
    - jq . .detect-secrets-log.json -C
  tags:
    - kubernetes

package_docker:
  image: docker:19.03.12
  stage: package
  services:
    - docker:19.03.12-dind
  before_script:
    - docker info
    - echo "Obteniendo la version de la app"
    - DOCK_VERSION=$(cat VERSION.txt)
    # # Login en docker registry
    # - echo "Construyendo la imagen DOCKER de la APP"
    # - docker login
    #     -u ${DOCK_REG_USER_GCP}
    #     -p "$(cat $DOCK_REG_PWD_GCP)"
    #     ${DOCK_REG_GCP}
  script:
    - |
      echo 'Crear tag de imagen docker'
      docker build -t ${DOCK_REG_GCP}/${DOCK_REG_GRP}/${DOCK_IMG}:${DOCK_VERSION} .
      docker push ${DOCK_REG_GCP}/${DOCK_REG_GRP}/${DOCK_IMG}:${DOCK_VERSION}
      if [ "$DOCKER_LATEST" = true ] ; then
        echo 'Crear tag de imagen docker latest'
        docker tag ${DOCK_REG_GCP}/${DOCK_REG_GRP}/${DOCK_IMG}:${DOCK_VERSION} \
            ${DOCK_REG_GCP}/${DOCK_REG_GRP}/${DOCK_IMG}:latest
        docker push ${DOCK_REG_GCP}/${DOCK_REG_GRP}/${DOCK_IMG}:latest
      fi
  tags:
    - kubernetes

validate_docker:
  image: clmdevops/klar:2.4.0
  stage: validate
  variables:
    CLAIR_ADDR: "clairsvc"
    CLAIR_OUTPUT: "Low"
    CLAIR_THRESHOLD: "10"
    FORMAT_OUTPUa: "table"
    DOCKER_USER: $DOCK_REG_USER_GCP
  before_script:
    - export DOCKER_PASSWORD=$(cat $DOCK_REG_PWD_GCP)
    - echo "Obteniendo la version de la app"
    - DOCK_VERSION=$(cat VERSION.txt)
  script:
    - klar ${DOCK_REG_GCP}/${DOCK_REG_GRP}/${DOCK_IMG}:${DOCK_VERSION}
  tags:
    - kubernetes

release:
  image: clmdevops/semantic-release
  stage: release
  only:
    refs:
    - branches
  except:
    refs:
    - tags
  script:
    - npx semantic-release
  artifacts:
    paths:
    - CHANGELOG.md

    