variables:
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ""
  DOCKER_DRIVER: overlay2
  DOCK_REG_GRP: "api"
  DOCK_IMG: "basket-api"
  OBJECTS_DIRECTORY: 'obj'
  NUGET_PACKAGES_DIRECTORY: '.nuget'
  SOURCE_CODE_PATH: '*/*/'
  SOLUTION_DIRECTORY: 'microservices/Basket'
  KUBE_NAMESPACE: 'default'
  RELEASE_NAME: 'basket-api'
  GCP_API_IPNAME: 'domain-apiservice'


cache:
  key: $CI_COMMIT_REF_SLUG
  paths:
    - '$SOURCE_CODE_PATH$OBJECTS_DIRECTORY/project.assets.json'
    - '$SOURCE_CODE_PATH$OBJECTS_DIRECTORY/*.csproj.nuget.*'
    - '$NUGET_PACKAGES_DIRECTORY'


stages:
  - pre-version
  - build
  - test
  - codequality
  - package
  - validate
  - deploy
  - testing
  - rollback
  - release

pre-semantic-version:
  image: clmdevops/semantic-release
  stage: pre-version
  only:
    refs:
    - branches
  except:
    refs:
    - tags
    variables:
      - $CI_COMMIT_TITLE =~ /^RELEASE:.+$/
  script:
    - npx semantic-release --generate-notes false --dry-run
  artifacts:
    paths:
    - VERSION.txt
  tags:
    - kubernetes

# build:
#   stage: build
#   script:
#     - echo "Version is $(cat VERSION.txt)"

build:
  image: mcr.microsoft.com/dotnet/core/sdk:3.1
  stage: build
  before_script:
    - dotnet restore $SOLUTION_DIRECTORY --packages $NUGET_PACKAGES_DIRECTORY
  script:
    - dotnet build $SOLUTION_DIRECTORY --no-restore
  only:
    refs:
    - branches
  except:
    refs:
    - tags
    variables:
      - $CI_COMMIT_TITLE =~ /^RELEASE:.+$/
  tags:
    - kubernetes

unit_test:
  image: mcr.microsoft.com/dotnet/core/sdk:3.1
  stage: test
  script:
    - dotnet test $SOLUTION_DIRECTORY/Basket.UnitTests
  only:
    refs:
    - branches
  except:
    refs:
    - tags
    variables:
      - $CI_COMMIT_TITLE =~ /^RELEASE:.+$/
  tags:
    - kubernetes

functional_test:
  image: mcr.microsoft.com/dotnet/core/sdk:3.1
  services:
    - rabbitmq:3
    - redis:latest
  stage: test
  script:
    - dotnet test $SOLUTION_DIRECTORY/Basket.FunctionalTests
  only:
    refs:
    - branches
  except:
    refs:
    - tags
    variables:
      - $CI_COMMIT_TITLE =~ /^RELEASE:.+$/
  tags:
    - kubernetes

# JOB para revision de calidad del codigo
sonar_test:
  image: sonarsource/sonar-scanner-cli
  stage: test
  # allow_failure: true
  variables:
    SONAR_SOURCE: "microservices/Basket"
    SONAR_EXCLUSIONS: "**/bin/**,**/obj/**"
  before_script:
    # Validar que existe el archivo sonar-project.properties requerido.
    - |
      if [ -f sonar-project.properties ]
        then
          echo "Existe archivo sonar-project.properties."
          cat sonar-project.properties
        else
          echo "No existe archivo sonar-project.properties." ; exit 1
      fi
     # Validar la existencia de la variable sonar_source.
    - if [ -z "$SONAR_SOURCE" ]; then export SONAR_SOURCE="."; fi
    # Tipos administidos: NodeJS, Gradle, Maven
    - echo "Obteniendo la version de la app"
    - SONAR_PROJECT_VERSION=$(cat VERSION.txt)
    - echo $SONAR_PROJECT_VERSION
  script:
    - sonar-scanner --debug
  only:
    refs:
    - branches
  except:
    refs:
    - tags
    variables:
      - $CI_COMMIT_TITLE =~ /^RELEASE:.+$/
  tags:
    - kubernetes

detect_secrets:
  image: clmdevops/detect-secrets:0.14.3
  stage: test
  variables:
    SCAN_SOURCE: "microservices/Basket"
  script:
    - detect-secrets scan $SCAN_SOURCE >> .detect-secrets-log.json
    - jq . .detect-secrets-log.json -C
  only:
    refs:
    - branches
  except:
    refs:
    - tags
    variables:
      - $CI_COMMIT_TITLE =~ /^RELEASE:.+$/
  tags:
    - kubernetes

package_docker:
  image: docker:19.03.12
  stage: package
  services:
    - docker:19.03.12-dind
  cache: {}
  before_script:
    - docker info
    - echo "Obteniendo la version de la app"
    - DOCK_VERSION=$(cat VERSION.txt)
    - echo $DOCK_VERSION
    # Login en docker registry
    - echo "Construyendo la imagen DOCKER de la APP"
    - docker login
        -u ${DOCK_REG_USER_GCP}
        -p "$(cat $DOCK_REG_PWD_GCP)"
        ${DOCK_REG_GCP}
  script:
    - |
      echo 'Crear tag de imagen docker'
      docker build -t ${DOCK_REG_GCP}/${DOCK_REG_GRP}/${DOCK_IMG}:${DOCK_VERSION} .
      docker push ${DOCK_REG_GCP}/${DOCK_REG_GRP}/${DOCK_IMG}:${DOCK_VERSION}
      if [ "$DOCKER_LATEST" = true ] ; then
        echo 'Crear tag de imagen docker latest'
        docker tag ${DOCK_REG_GCP}/${DOCK_REG_GRP}/${DOCK_IMG}:${DOCK_VERSION} \
            ${DOCK_REG_GCP}/${DOCK_REG_GRP}/${DOCK_IMG}:latest
        docker push ${DOCK_REG_GCP}/${DOCK_REG_GRP}/${DOCK_IMG}:latest
      fi
  only:
    refs:
    - branches
  except:
    refs:
    - tags
    variables:
      - $CI_COMMIT_TITLE =~ /^RELEASE:.+$/
  tags:
    - kubernetes

validate_docker:
  image: clmdevops/klar:2.4.0
  stage: validate
  cache: {}
  variables:
    CLAIR_ADDR: "clairsvc"
    CLAIR_OUTPUT: "Low"
    CLAIR_THRESHOLD: "10"
    FORMAT_OUTPUa: "table"
    DOCKER_USER: $DOCK_REG_USER_GCP
  before_script:
    - export DOCKER_PASSWORD=$(cat $DOCK_REG_PWD_GCP)
    - echo "Obteniendo la version de la app"
    - DOCK_VERSION=$(cat VERSION.txt)
    - echo $DOCK_VERSION    
  script:
    - klar ${DOCK_REG_GCP}/${DOCK_REG_GRP}/${DOCK_IMG}:${DOCK_VERSION}
  only:
    refs:
    - branches
  except:
    refs:
    - tags
    variables:
      - $CI_COMMIT_TITLE =~ /^RELEASE:.+$/
  tags:
    - kubernetes

deploy:
  image: clmdevops/k8s-alpine:1.18.2
  stage: deploy
  cache: {}
  script:
    - echo "Version is $(cat VERSION.txt)"
    - export APP_VERSION=$(cat VERSION.txt)
    - set_k8s
    - docker_registry_gcp
    - deploy_gke
  only:
    refs:
    - branches
  except:
    refs:
    - tags
    variables:
      - $CI_COMMIT_TITLE =~ /^RELEASE:.+$/
  tags:
    - kubernetes

testing:
  image: clmdevops/k8s-alpine:1.18.2
  stage: testing
  cache: {}
  script:
    - set_k8s
    - helm test ${RELEASE_NAME} --namespace ${KUBE_NAMESPACE}
    - kubectl delete pod ${RELEASE_NAME}-test-connection 
  only:
    refs:
    - branches
  except:
    refs:
    - tags
    variables:
      - $CI_COMMIT_TITLE =~ /^RELEASE:.+$/
  tags:
    - kubernetes

rollback:
  stage: rollback
  cache: {}
  script:
    - set_k8s
    - echo "Realizar el rollback de la app a la version $RELEASE_NAME"
    - helm history $RELEASE_NAME | grep deployed
    - echo "Ejecutar comando de rollback con helm"
    - helm rollback $RELEASE_NAME $(helm history $RELEASE_NAME | grep deployed | cut -f1) --wait
    - helm status $RELEASE_NAME
  when: on_failure
  only:
    refs:
    - branches
  except:
    refs:
    - tags
    variables:
      - $CI_COMMIT_TITLE =~ /^RELEASE:.+$/
  tags:
    - kubernetes

release:
  image: clmdevops/semantic-release
  stage: release
  cache: {}
  script:
    - npx semantic-release
  only:
    refs:
    - branches
  except:
    refs:
    - tags
    variables:
      - $CI_COMMIT_TITLE =~ /^RELEASE:.+$/
  artifacts:
    paths:
    - CHANGELOG.md
  tags:
    - kubernetes

.script_exec: &script_exec |
 [[ "$TRACE" ]] && set -x

  
  function set_k8s() {
    echo "export kubeconfig master"
    export KUBECONFIG=$KUBECONFIG_BASKET
    export GOOGLE_APPLICATION_CREDENTIALS=$GCP_CREDENTIALS_GKE
  }

  function docker_registry_gcp() {
    kubectl -n ${KUBE_NAMESPACE} create secret docker-registry ${RELEASE_NAME} \
        --docker-server="https://${DOCK_REG_GCP}" \
        --docker-username=${DOCK_REG_USER_GCP} \
        --docker-email=${DOCK_REG_EMAIL_GCP} \
        --docker-password="$(cat $DOCK_REG_PWD_GCP)" || true
  }

  function deploy_gke() {
    helm upgrade ${RELEASE_NAME} ./k8s/${RELEASE_NAME} --install --wait \
      --namespace ${KUBE_NAMESPACE} \
      --set image.repository=${DOCK_REG_GCP}/${DOCK_REG_GRP}/${DOCK_IMG} \
      --set image.tag=${APP_VERSION} \
      --set imagePullSecrets=${RELEASE_NAME} \
      --set service.type=NodePort \
      --set ingress.enabled=true \
      --set-string ingress.annotations."kubernetes\.io/ingress\.global-static-ip-name"=${GCP_API_IPNAME} \
      --set-string ingress.annotations."networking\.gke\.io/managed-certificates"=${RELEASE_NAME}
  }


before_script:
  - *script_exec


